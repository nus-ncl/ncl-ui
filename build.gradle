buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'io.spring.dependency-management' version '0.6.0.RELEASE'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id "org.sonarqube" version "3.1.1"
    id 'com.jfrog.bintray' version '1.7.1'
    id 'org.tenne.rest' version '0.4.2'
}
apply plugin: 'spring-boot'

ext {
    hash = System.getenv('TRAVIS_COMMIT') == null ? 'SNAPSHOT' : "git rev-parse --short ${System.getenv('TRAVIS_COMMIT')}".execute().text.trim()
}

group = 'sg.ncl'

version "1-${hash}"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
        mavenBom 'org.springframework.boot:spring-boot-dependencies:1.4.0.RELEASE'
    }
    dependencies {
        dependency 'org.apache.commons:commons-lang3:3.4'
        dependency 'commons-io:commons-io:2.5'
        dependency 'org.projectlombok:lombok:1.16.10'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-websocket'
    compile 'org.thymeleaf.extras:thymeleaf-extras-java8time' // for thymeleaf to format zoneddatetime into readable format
    compile 'javax.inject:javax.inject'
    compile 'org.json:json'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'commons-io:commons-io'
    compile 'org.projectlombok:lombok'
    compile 'com.jcraft:jsch:0.1.54'

    testCompile 'org.apache.commons:commons-lang3'
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
}

compileJava {
    dependsOn processResources
}

tasks.jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'zhangchunwang-github'
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        //property 'sonar.scanner.force-deprecated-java-version-grace-period', 'true'
        if (System.getenv('TRAVIS_BRANCH') == 'master') {
            if (System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
            } else {
                property 'sonar.github.pullRequest', System.getenv('TRAVIS_PULL_REQUEST')
                property 'sonar.github.repository', System.getenv('TRAVIS_REPO_SLUG')
                property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
            }
        }

    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    dryRun = System.getenv('TRAVIS_BRANCH') != 'master' || System.getenv('TRAVIS_PULL_REQUEST') != 'false'
    publish = System.getenv('TRAVIS_BRANCH') == 'master' && System.getenv('TRAVIS_PULL_REQUEST') == 'false'
    pkg {
        repo = 'generic'
        name = 'service-web'
        userOrg = 'ncl'
        desc = 'NCL web service'
        websiteUrl = 'https://github.com/nus-ncl/service-web'
        issueTrackerUrl = 'https://github.com/nus-ncl/service-web/issues'
        vcsUrl = 'https://github.com/nus-ncl/service-web.git'
        licenses = ['Apache-2.0']

        githubRepo = 'nus-ncl/service-web'

        version {
            name = "${project.version}"
            desc = "Web Service ${project.version} release"
            released = new Date()
        }
    }
}

task bamboo(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'post'
    uri = 'https://bamboo.ncl.sg/rest/api/latest/queue/NCL-WS'
    contentType = groovyx.net.http.ContentType.JSON
    requestHeaders = [
            Accept       : 'application/json',
            Authorization: System.getenv('BAMBOO_CREDENTIALS')
    ]
    responseHandler = {
        assert it.buildNumber != null
        println '- Response: ' + it
    }
}

task triggerBamboo {
    if (System.getenv('TRAVIS_BRANCH') == 'master' && System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
        println 'Triggering Bamboo Build:'
        tasks.bamboo.execute()
    } else {
        println 'Is not on master branch or is a pull request: branch = ' + System.getenv('TRAVIS_BRANCH') + ', pull request = ' + System.getenv('TRAVIS_PULL_REQUEST')
    }
}

task printInfo {
    println "  - project: ${project.name}"
    println "  - archive artifacts: ${project.configurations.archives.allArtifacts.size()}"
    project.configurations.archives.artifacts.files.each {
        println "    - ${it.name}"
    }
    println "  - group: ${project.group}"
    println "  - version: ${project.version}"
    println "  - ${subprojects.size()} subprojects:"
    subprojects.each {
        println "    - ${it.name}:"
        println "      - archive artifacts: ${it.configurations.archives.allArtifacts.size()}"
        it.configurations.archives.artifacts.files.each {
            println "        - ${it.name}"
        }
        println "      - group: ${it.group}"
        println "      - version: ${it.version}"
    }
}

wrapper{
    gradleVersion '6.8.3'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

springBoot {
    mainClass = 'sg.ncl.WebApplication'
}